#version 430

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform image2D imageUnit;

uniform float timer;

uniform vec3 wind_direction;
uniform float wind_scale;
uniform float wind_refresh_rate;

// Simplex 2D noise
//
vec3 permute (vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise (vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}

vec4 random_intensity_fixed_direction() {

    float value = snoise(vec2(float(gl_GlobalInvocationID.x) / 1024.0 + timer / wind_refresh_rate + 4751, float(gl_GlobalInvocationID.y) / 1024.0 + timer/wind_refresh_rate + 4751)) * 0.5 + 0.5;

    return vec4(wind_direction.x * value * wind_scale, wind_direction.y * value * wind_scale, wind_direction.z  * value * wind_scale, 1.0);
}


void main() {
	ivec2 storeLoc = ivec2(gl_GlobalInvocationID.xy);

  vec4 stored = imageLoad( imageUnit, storeLoc );

  float value_0 = snoise(vec2(float(gl_GlobalInvocationID.x) / 1024.0 + timer/wind_refresh_rate + 4751, float(gl_GlobalInvocationID.y) / 1024.0 + timer/wind_refresh_rate + 4751));
  float value_1 = snoise(vec2(float(gl_GlobalInvocationID.x) / 1024.0 + timer/wind_refresh_rate + 6153, float(gl_GlobalInvocationID.y) / 1024.0 + timer/wind_refresh_rate + 6153));
  float value_2 = snoise(vec2(float(gl_GlobalInvocationID.x) / 1024.0 + timer/wind_refresh_rate + 8072, float(gl_GlobalInvocationID.y) / 1024.0 + timer/wind_refresh_rate + 8072));
	
  //vec4 wind = vec4 (value_0 * wind_scale, value_1 * wind_scale, value_2 * wind_scale, 1.0);
  vec4 wind = random_intensity_fixed_direction();

	imageStore(imageUnit, storeLoc, wind);
}