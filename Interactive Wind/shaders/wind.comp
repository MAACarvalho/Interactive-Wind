#version 430

#define M_PI 3.141592654f
#define BOARD_X 30.0
#define BOARD_Y 30.0
#define TEX_X 256
#define TEX_Y 256
#define TEXEL_DIM min(BOARD_X/TEX_X, BOARD_Y/TEX_X)

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform image2D imageUnit;
uniform sampler2D wind_texture;
uniform sampler2D obstacle_normals_texture;

uniform vec3 wind_direction;
uniform int wind_type;


/////////////////////////////////////////////////////////////////////////////
// Description: Generic GLSL 1D Noise function							   //	
// Author: Patricio Gonzalez Vivo										   //	
// Link: https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83 //
/////////////////////////////////////////////////////////////////////////////

//	Simplex 2D noise
//	by Ian McEwan, Ashima Arts
//
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
/////////////////////////////////////////////////////////////////////////////

vec4 random_intensity_fixed_direction(vec4 wind_dir) {

    // Check for wall in between
    int between_steps = 200;
    
    vec2 tex_pos = gl_GlobalInvocationID.xy;
    vec2 current_texel = tex_pos;
    vec2 source_dir = wind_dir.xz;
    vec2 source_dir_step = normalize(source_dir) * TEXEL_DIM;
    vec4 normal = vec4(0.0, 0.0, 0.0, 0.0);
    
    int step = 0; bool wall_between = false;
    for (; step < between_steps; step++) {
                
        ivec2 texel = ivec2(tex_pos + source_dir_step * step);

        if (texel.x < 0 || texel.x > TEX_X || texel.y < 0 || texel.y > TEX_Y) break;

        if (texel == current_texel) continue;
        else {
                    
            current_texel = texel;

            normal = texelFetch(obstacle_normals_texture, texel, 0);

            //if (normal != vec4(0.0, 0.0, 0.0, 0.0)) { wall_between = true; break; }

            vec2 normal_xz = normalize(normal).xz;
            vec2 parallel_xz = vec2(normal_xz.y, -normal_xz.x);
            vec2 source_dir_xz = normalize(source_dir);

            float dot_normal_source = dot (normal_xz, source_dir_xz);

            if (dot_normal_source < 0.0) {wall_between = true; break;}

        }

    }

    if (wall_between) wind_dir = mix (normalize(wind_dir) * 0.001, wind_dir, float(step) / float(between_steps));
    else {

        // Check for wall after
        int after_steps = 50;
        
        vec2 away_source_dir = - wind_dir.xz;
        vec2 away_source_dir_step = normalize(away_source_dir) * TEXEL_DIM;
        //vec2 wind_dir_step = vec2(normalize(wind_dir).xz) * TEXEL_DIM;
        vec2 parallel = vec2(0.0, 0.0);

        int step = 0; bool wall_after = false;
        for (; step < after_steps; step++) {
                    
            ivec2 texel = ivec2(tex_pos + away_source_dir_step * step);

            if (texel == current_texel) continue;
            else {
                        
                current_texel = texel;

                normal = texelFetch(obstacle_normals_texture, texel, 0);

                vec2 normal_xz = normalize(normal).xz;
                vec2 parallel_xz = vec2(normal_xz.y, -normal_xz.x);
                vec2 away_source_dir_xz = normalize(away_source_dir);

                float dot_away_parallel = dot( parallel_xz, away_source_dir_xz );

                if ( dot_away_parallel > 0.0 ) parallel_xz = - parallel_xz;
                else if ( dot_away_parallel == 0.0 && snoise(gl_GlobalInvocationID.xy) < 0.5) parallel_xz = - parallel_xz;
                
                parallel = normalize(parallel_xz) * length(wind_dir);

                float dot_normal_source = dot (normal_xz, away_source_dir_xz);

                if (dot_normal_source < 0.0) {wall_after = true; break;}

            }

        }

        if (wall_after) wind_dir = mix (normalize(vec4(parallel.x, 0.0, parallel.y, 1.0)) * length(wind_dir), wind_dir, float(step)/float(after_steps));
    
    }

    return vec4(wind_dir.x, wind_dir.y, wind_dir.z, 1.0);

}

vec4 random_intensity_fixed_direction() {

    return random_intensity_fixed_direction(vec4(wind_direction.x, wind_direction.y, wind_direction.z, 1.0));

}

vec4 vortex(float strength, float radius, float angle) {

    float v_r = 0.0f;
    float v_theta = strength / ( 2.0f * M_PI * radius );
    float v_z = 0.0f;
    float potencial = strength / ( 2.0f * M_PI ) * angle;

    return vec4(v_r, v_theta, v_z, potencial);

}

vec4 vortex_effect( vec4 wind_position ){

    vec4 pos = vec4(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 1,1);
    float position_x = (pos.x * BOARD_X / TEX_X ) - BOARD_X / 2.0f; // Centering on (0,0)
    float position_y = (pos.y * BOARD_Y / TEX_Y ) - BOARD_Y / 2.0f; // Centering on (0,0)

    float radius = length(vec2(position_x - wind_position.x, position_y - wind_position.y));
    float theta = atan( position_y - wind_position.y , position_x - wind_position.x );

    vec4 polar_velocity = vortex(1, radius, theta);

	float new_radius = radius + polar_velocity.x;
	float new_theta  = theta + polar_velocity.y;

	float new_position_x = new_radius * cos (new_theta) + wind_position.x;
	float new_position_y = new_radius * sin (new_theta) + wind_position.y;

    vec4 wind_dir = (vec4(new_position_x, 0, new_position_y, 1) - vec4 (position_x, 0, position_y, 0));

	return wind_dir;
}


vec4 sink_source(float strength, float radius, float angle) {

    float v_r = strength / ( 2.0f * M_PI * radius );
    float v_theta = 0.0f;
    float v_z = 0.0f;
    float potencial = strength / ( 2.0f * M_PI ) * log(radius);

    return vec4(v_r, v_theta, v_z, potencial);

}

vec4 sink_effect( vec4 wind_position ){

    vec4 pos = vec4(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 1, 1);
    float position_x = (pos.x * BOARD_X / TEX_X ) - BOARD_X / 2.0f; // Centering on (0,0)
    float position_y = (pos.y * BOARD_Y / TEX_Y ) - BOARD_Y / 2.0f; // Centering on (0,0)

    float radius = length(vec2(position_x - wind_position.x, position_y - wind_position.y));
    float theta = atan(position_y - wind_position.y, position_x - wind_position.x );

    vec4 polar_velocity = sink_source( 50, radius , theta);

	float new_radius = radius + polar_velocity.x;
	float new_theta  = theta + polar_velocity.y;

	float new_position_x = new_radius * cos (new_theta) + wind_position.x;
	float new_position_y = new_radius * sin (new_theta) + wind_position.y;

    vec4 wind_dir = (vec4(new_position_x, 0, new_position_y, 1) - vec4 (position_x, 0, position_y, 0));


    vec2 tex_pos = gl_GlobalInvocationID.xy;
    vec2 current_texel = tex_pos;
    
    vec4 normal = vec4(0.0, 0.0, 0.0, 0.0);

    // Check for wall after
    int between_steps = 1000;
    
    vec2 sink_dir =  ((wind_position.xz + BOARD_X * 0.5) / BOARD_X * 256) - tex_pos;
    vec2 sink_dir_step = normalize(sink_dir) * TEXEL_DIM;
    //vec2 wind_dir_step = vec2(normalize(wind_dir).xz) * TEXEL_DIM;
    vec2 parallel = vec2(0.0, 0.0);

    int step = 0;
    bool wall_between = false;

    for (; step < between_steps; step++) {
                
        if (length(sink_dir_step * step) > length(sink_dir)) break;

        ivec2 texel = ivec2(tex_pos + sink_dir_step * step);

        if (texel == current_texel) continue;
        else {
                    
            current_texel = texel;

            normal = texelFetch(obstacle_normals_texture, texel, 0);

            vec2 normal_xz = normalize(normal).xz;
            vec2 parallel_xz = vec2(normal_xz.y, -normal_xz.x);
            vec2 sink_dir_xz = normalize(sink_dir);

            float dot_sink_parallel = dot( parallel_xz, sink_dir_xz );

            //if ( normal != vec4(0,0,0,0) ) {wall_between = true; break;}

            if ( dot_sink_parallel > 0.0 ) parallel_xz = - parallel_xz;
            if ( max( abs( normal_xz.x ) , abs( normal_xz.y ) ) == abs(normal_xz.x) && max( abs( sink_dir.x ) , abs( sink_dir.y ) ) == abs(sink_dir.x) ) parallel_xz = - parallel_xz;
            else if ( max( abs( normal_xz.x ) , abs( normal_xz.y ) ) == abs(normal_xz.y) && max( abs( sink_dir.x ) , abs( sink_dir.y ) ) == abs(sink_dir.y) ) parallel_xz = - parallel_xz;


            //if ( sink_dir.y < 0.0 ) parallel_xz = - parallel_xz;
            
            parallel = normalize( parallel_xz) * length(wind_dir);

            float dot_normal_sink = dot (normal_xz, sink_dir_xz);

            if (dot_normal_sink < 0.0) {wall_between = true; break;}

        }

    }

    float smoo = smoothstep(0, between_steps, step);
    if (wall_between) wind_dir = mix (normalize(vec4(parallel.x, 0.0, parallel.y, 1.0)) * length(wind_dir) * 0.1, wind_dir, smoo);
    //if (wall_between) wind_dir = vec4( 0, 100, 0, 0);

    
	return wind_dir;

}

vec4 source_effect( vec4 wind_position ){

    vec4 pos = vec4(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y, 1, 1);
    float position_x = (pos.x * BOARD_X / TEX_X ) - BOARD_X / 2.0f; // Centering on (0,0)
    float position_y = (pos.y * BOARD_Y / TEX_Y ) - BOARD_Y / 2.0f; // Centering on (0,0)

    float radius = length(vec2(position_x - wind_position.x, position_y - wind_position.y));
    float theta = atan(position_y - wind_position.y, position_x - wind_position.x );

    vec4 polar_velocity = sink_source( -50, radius , theta);

	float new_radius = radius + polar_velocity.x;
	float new_theta  = theta + polar_velocity.y;

	float new_position_x = new_radius * cos (new_theta) + wind_position.x;
	float new_position_y = new_radius * sin (new_theta) + wind_position.y;

    vec4 wind_dir = (vec4(new_position_x, 0, new_position_y, 1) - vec4 (position_x, 0, position_y, 0));

    // Check for wall in between
    int between_steps = 1000;
    
    vec2 tex_pos = gl_GlobalInvocationID.xy;
    vec2 current_texel = tex_pos;
    vec2 source_dir = ((wind_position.xz + BOARD_X * 0.5) / BOARD_X * 256) - tex_pos;
    vec2 source_dir_step = normalize(source_dir) * TEXEL_DIM;
    vec4 normal = vec4(0.0, 0.0, 0.0, 0.0);
    
    int step = 0; bool wall_between = false;
    for (; step < between_steps; step++) {
                
        if (length(source_dir_step * step) > length(source_dir)) break;

        ivec2 texel = ivec2(tex_pos + source_dir_step * step);

        if (texel == current_texel) continue;
        else {
                    
            current_texel = texel;

            normal = texelFetch(obstacle_normals_texture, texel, 0);

            //if (normal != vec4(0.0, 0.0, 0.0, 0.0)) { wall_between = true; break; }

            vec2 normal_xz = normalize(normal).xz;
            vec2 parallel_xz = vec2(normal_xz.y, -normal_xz.x);
            vec2 source_dir_xz = normalize(source_dir);

            float dot_normal_source = dot (normal_xz, source_dir_xz);

            if (dot_normal_source < 0.0) {wall_between = true; break;}

        }

    }

    if (wall_between) wind_dir = mix (normalize(wind_dir) * 0.001, wind_dir, float(step) / float(between_steps));
    else {

        // Check for wall after
        int after_steps = 200;
        
        vec2 away_source_dir = tex_pos - ((wind_position.xz + BOARD_X * 0.5) / BOARD_X * 256);
        vec2 away_source_dir_step = normalize(away_source_dir) * TEXEL_DIM;
        //vec2 wind_dir_step = vec2(normalize(wind_dir).xz) * TEXEL_DIM;
        vec2 parallel = vec2(0.0, 0.0);

        int step = 0; bool wall_after = false;
        for (; step < after_steps; step++) {
                    
            ivec2 texel = ivec2(tex_pos + away_source_dir_step * step);

            if (texel == current_texel) continue;
            else {
                        
                current_texel = texel;

                normal = texelFetch(obstacle_normals_texture, texel, 0);

                vec2 normal_xz = normalize(normal).xz;
                vec2 parallel_xz = vec2(normal_xz.y, -normal_xz.x);
                vec2 away_source_dir_xz = normalize(away_source_dir);

                float dot_away_parallel = dot( parallel_xz, away_source_dir_xz );

                if ( dot_away_parallel > 0.0 ) parallel_xz = - parallel_xz;
                
                parallel = normalize(parallel_xz) * length(wind_dir);

                float dot_normal_source = dot (normal_xz, away_source_dir_xz);

                if (dot_normal_source < 0.0) {wall_after = true; break;}

            }

        }

        float smoo = smoothstep(0, after_steps, step);

        if (wall_after) wind_dir = mix (normalize(vec4(parallel.x, 0.0, parallel.y, 1.0)) * length(wind_dir), wind_dir, smoo);
    
    }

    
	return wind_dir;

}

vec4 get_cons_wind_from_tex () {

    vec4 wind = vec4 (0.0, 0.0, 0.0, 0.0);
    bool done = true;

    // Constant
    for (int i=99; i >= 0 && done; i--) {
        
        vec4 holder = texelFetch (wind_texture , ivec2(0, i), 0);
        
        if (holder.w == 0) done = false;
        else {

            wind += random_intensity_fixed_direction(holder);

        }
    
    }

    return wind;

}

vec4 get_vortex_wind_from_tex () {

    vec4 wind = vec4 (0.0, 0.0, 0.0, 0.0);
    bool done = true;

    for (int i=99; i >= 0 && done; i--) {

        vec4 holder = texelFetch (wind_texture , ivec2(1, i) , 0);

        if (holder.w == 0) done = false;
        else {

            holder.x = (holder.x * BOARD_X) - BOARD_X * 0.5;
            holder.y = (holder.y * BOARD_X) - BOARD_X * 0.5;
            holder.z = (holder.z * BOARD_Y) - BOARD_Y * 0.5;

            wind += vortex_effect( holder );

        }
    }

    return wind;

}

vec4 get_sink_wind_from_tex () {

    vec4 wind = vec4 (0.0, 0.0, 0.0, 0.0);
    bool done = true;

    for (int i=99; i >= 0 && done; i--) {

        vec4 holder = texelFetch (wind_texture , ivec2(2, i) , 0);
        
        if(holder.w == 0) done = false;
        else {

            holder.x = (holder.x * BOARD_X) - BOARD_X * 0.5;
            holder.y = (holder.y * BOARD_X) - BOARD_X * 0.5;
            holder.z = (holder.z * BOARD_Y) - BOARD_Y * 0.5;
            
            wind += 10 * sink_effect( holder);

        }
    }

    return wind;

}

vec4 get_source_wind_from_tex () {

    vec4 wind = vec4 (0.0, 0.0, 0.0, 0.0);
    bool done = true;

    for (int i=99; i >= 0 && done; i--) {

        vec4 holder = texelFetch (wind_texture, ivec2(3, i) , 0);
        
        if (holder.w == 0) done = false;
        else {

            holder.x = (holder.x * BOARD_X) - BOARD_X * 0.5;
            holder.y = (holder.y * BOARD_X) - BOARD_X * 0.5;
            holder.z = (holder.z * BOARD_Y) - BOARD_Y * 0.5;
            
            wind += 10 * source_effect( holder);
            
        }
    }

    return wind;

}

void main() {

	ivec2 storeLoc = ivec2(gl_GlobalInvocationID.xy);

	vec4 stored = imageLoad( imageUnit, storeLoc );

	vec4 wind = vec4(0,0,0,0);

	switch (wind_type) {
		
		case 0:
			
			wind = random_intensity_fixed_direction();
			break;
		
		case 1:

			wind = vortex_effect( vec4(-1,-2,0,10) );
			break;

		case 2:

			wind = source_effect( vec4( -5,6,0,10)); // source
			break;

		case 3:

			wind = sink_effect( vec4(-3,-3,0,10)); // sink 
			break; 

        case 4:

            wind += get_cons_wind_from_tex();
            wind += get_vortex_wind_from_tex();
            wind += get_sink_wind_from_tex();            
            wind += get_source_wind_from_tex();

            break;
            
		default:

			wind = random_intensity_fixed_direction();
			break;

	} 

	imageStore(imageUnit, storeLoc, wind);
}